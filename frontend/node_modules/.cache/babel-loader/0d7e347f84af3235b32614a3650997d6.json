{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\spm_g6t8\\\\frontend\\\\src\\\\pages\\\\HR\\\\HREnrolClasses.js\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect } from 'react';\nimport { Container, Form, Button, Dropdown, DropdownButton } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HREnrolClasses = () => {\n  _s();\n\n  const {\n    courseID,\n    courseName,\n    hasPrereq\n  } = useParams();\n  const [classes, setClasses] = useState([]);\n  const [eligibleEngineers, setEligibleEngineers] = useState([]);\n  const [selectedClass, setSelectedClass] = useState(\"\");\n  const [selectedEngineers, setSelectedEngineers] = useState([]);\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:5000/classes/courseID?courseID=${courseID}`).then(res => {\n      setClasses(res.data);\n      setSelectedClass(res.data[0].class_id);\n    });\n  }, [courseID]); // get eligible engineers when page loads\n\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:5000/engineers/eligibleEngineers?courseID=${courseID}&hasPrereq=${hasPrereq}`).then(res => {\n      setEligibleEngineers(res.data);\n    });\n  }, [courseID, hasPrereq]);\n\n  const addOrRemoveEngineer = e => {\n    const checked = e.target.checked;\n    const selectedEmail = e.target.id;\n\n    if (checked) {\n      setSelectedEngineers(prev => [...prev, selectedEmail]);\n    } else {\n      setSelectedEngineers(emails => emails.filter(email => email !== selectedEmail));\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    axios.post(\"http://127.0.0.1:5000/enrolled\", {\n      \"courseID\": courseID,\n      \"classID\": selectedClass,\n      \"engineers\": selectedEngineers\n    });\n    alert(\"enrolled engineers\");\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enrolment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [courseID, \" | \", courseName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Choose a class:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n        title: selectedClass,\n        children: classes.map(a_class => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => setSelectedClass(a_class.class_id),\n          children: a_class.class_id\n        }, a_class.class_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: eligibleEngineers.map(engineer => /*#__PURE__*/_jsxDEV(Form.Check, {\n        type: \"checkbox\",\n        id: engineer.email,\n        label: engineer.email,\n        onClick: e => addOrRemoveEngineer(e)\n      }, engineer.email, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"mt-3\",\n      onClick: e => handleSubmit(e),\n      children: \"Enrol\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HREnrolClasses, \"6ea4OcL7oTrCD5TcJCO6aNQHp+c=\", false, function () {\n  return [useParams];\n});\n\n_c = HREnrolClasses;\nexport default HREnrolClasses;\n\nvar _c;\n\n$RefreshReg$(_c, \"HREnrolClasses\");","map":{"version":3,"sources":["C:/Users/User/Documents/spm_g6t8/frontend/src/pages/HR/HREnrolClasses.js"],"names":["useEffect","Container","Form","Button","Dropdown","DropdownButton","useParams","axios","useState","HREnrolClasses","courseID","courseName","hasPrereq","classes","setClasses","eligibleEngineers","setEligibleEngineers","selectedClass","setSelectedClass","selectedEngineers","setSelectedEngineers","get","then","res","data","class_id","addOrRemoveEngineer","e","checked","target","selectedEmail","id","prev","emails","filter","email","handleSubmit","preventDefault","post","alert","window","location","reload","map","a_class","engineer"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { useEffect } from 'react'\r\nimport { \r\n    Container,\r\n    Form,\r\n    Button,\r\n    Dropdown,\r\n    DropdownButton\r\n } from 'react-bootstrap'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from \"axios\"\r\nimport { useState } from \"react\"\r\n\r\nconst HREnrolClasses = () => {\r\n    const { courseID, courseName, hasPrereq } = useParams()\r\n    const [classes, setClasses] = useState([])\r\n    const [eligibleEngineers, setEligibleEngineers] = useState([])\r\n    const [selectedClass, setSelectedClass] = useState(\"\")\r\n    const [selectedEngineers, setSelectedEngineers] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://127.0.0.1:5000/classes/courseID?courseID=${courseID}`)\r\n            .then(res => {\r\n                setClasses(res.data)\r\n                setSelectedClass(res.data[0].class_id)\r\n            })\r\n    }, [courseID])\r\n\r\n\r\n    // get eligible engineers when page loads\r\n    useEffect(() => {\r\n        axios.get(`http://127.0.0.1:5000/engineers/eligibleEngineers?courseID=${courseID}&hasPrereq=${hasPrereq}`)\r\n            .then(res => {\r\n                setEligibleEngineers(res.data)\r\n            })\r\n    }, [courseID, hasPrereq])\r\n\r\n    const addOrRemoveEngineer = e => {\r\n        const checked = e.target.checked\r\n        const selectedEmail = e.target.id\r\n\r\n        if (checked) {\r\n            setSelectedEngineers(prev => [...prev, selectedEmail])\r\n        } else {\r\n            setSelectedEngineers(emails => emails.filter(email => email !== selectedEmail))\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        axios.post(\"http://127.0.0.1:5000/enrolled\", {\r\n            \"courseID\": courseID,\r\n            \"classID\": selectedClass,\r\n            \"engineers\": selectedEngineers\r\n        }) \r\n        alert(\"enrolled engineers\")\r\n        window.location.reload()\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <h1>Enrolment</h1>\r\n            <h3>{courseID} | {courseName}</h3>\r\n\r\n                <Form.Group className=\"mb-3\">\r\n                    <Form.Label>Choose a class:</Form.Label>\r\n                    <DropdownButton title={selectedClass}>                        \r\n                        {classes.map(a_class =>\r\n                            <Dropdown.Item \r\n                                key={a_class.class_id}\r\n                                onClick={() => setSelectedClass(a_class.class_id)}\r\n                            > \r\n                                {a_class.class_id}\r\n                            </Dropdown.Item>    \r\n                        )}\r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n                <div className=\"mt-3\">\r\n                {eligibleEngineers.map(engineer => \r\n                    <Form.Check \r\n                        type=\"checkbox\"\r\n                        key={engineer.email}\r\n                        id={engineer.email}\r\n                        label={engineer.email}\r\n                        onClick={(e) => addOrRemoveEngineer(e)}\r\n                    />\r\n                )}\r\n                </div>\r\n                <Button className=\"mt-3\" onClick={(e) => handleSubmit(e)}>Enrol</Button>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HREnrolClasses"]},"metadata":{},"sourceType":"module"}