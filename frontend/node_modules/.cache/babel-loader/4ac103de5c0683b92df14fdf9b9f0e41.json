{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\spm_g6t8\\\\frontend\\\\src\\\\pages\\\\Trainer\\\\TrainerCreateQuiz.js\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TrainerMCQQuestion from '../../components/TrainerMCQQuestion';\nimport TrainerTFQuestion from '../../components/TrainerTFQuestion';\nimport { Form, Container, Button } from \"react-bootstrap\";\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrainerCreateQuiz = () => {\n  _s();\n\n  // const [courses, setCourses] = useState([]);\n  // useEffect(() => {\n  //     axios.get(\"http://127.0.0.1:5000/courses\").then((res) => {\n  //     setCourses(res.data);\n  //     });\n  // }, []);\n  // console.log(courses[0].courseID)\n  const [quizType, setQuizType] = useState(\"\");\n  const [quizDuration, setQuizDuration] = useState(0);\n  const [allQns, setAllQns] = useState([]); // const [mcqQuestion, setMCQQuestion] = useState([])\n  // const [tfQuestion, setTFQuestion] = useState([])\n\n  const [qnNum, setQnNum] = useState(1);\n\n  const addMCQQuestion = () => {\n    // setMCQQuestion( mcqquestion => [...mcqquestion, <TrainerMCQQuestion />])\n    setAllQns(allQns => [...allQns, /*#__PURE__*/_jsxDEV(TrainerMCQQuestion, {\n      qnNum: qnNum\n    }, qnNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 42\n    }, this)]);\n    setQnNum(qnNum + 1);\n  };\n\n  const addTFQuestion = () => {\n    // setTFQuestion( tfquestion => [...tfquestion, <TrainerTFQuestion />])\n    setAllQns(allQns => [...allQns, /*#__PURE__*/_jsxDEV(TrainerTFQuestion, {\n      qnNum: qnNum\n    }, qnNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 42\n    }, this)]);\n    setQnNum(qnNum + 1);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); // getting all information from each question\n\n    let allQns = document.getElementsByClassName(\"allQns\")[0].children;\n    let qnsInfo = [];\n\n    for (let i = 0; i < allQns.length; i++) {\n      let qnInputs = allQns[i].children;\n      let qnTitle = qnInputs[1].value;\n      let qnOptions = qnInputs[2].children;\n      let qnType = allQns[i].className;\n      let optionValues = [];\n      let answer = \"\";\n\n      for (let j = 0; j < qnOptions.length; j++) {\n        if (qnType === \"mcq\") {\n          let optionValue = qnOptions[j].getElementsByClassName(\"form-control\")[0].value;\n          let isOptionChecked = qnOptions[j].getElementsByClassName(\"input-group-text\")[0].children[0].checked;\n          optionValues.push(optionValue);\n          console.log(optionValues);\n\n          if (isOptionChecked) {\n            answer = optionValue;\n          }\n        } else if (qnType === \"tf\") {\n          optionValues = [\"True\", \"False\"]; // console.log(qnOptions[j].children[0].checked)\n\n          answer = qnOptions[j].children[0].checked ? \"True\" : answer;\n        }\n      }\n\n      qnsInfo.push({\n        \"qnTitle\": qnTitle,\n        \"optionValues\": optionValues,\n        \"answer\": answer\n      });\n    }\n\n    console.log(qnsInfo);\n    let qnID = 1;\n    let title = '';\n    let options = [];\n    let qnanswer = '';\n\n    for (let k = 0; k < qnsInfo.length; k++) {\n      title = qnsInfo[k].qnTitle;\n    }\n\n    axios.post(\"http://127.0.0.1:5000/quiz\", {\n      // to fill up\n      \"quizID\": \"1\",\n      \"type\": quizType,\n      \"duration\": quizDuration // \"title\": title,\n      // \"options\": options,\n      // \"answer\": qnanswer\n\n    }).then(console.log(\"sent to backend!\"));\n    alert(\"quiz created! redirecting back to manage course\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chapter 1 Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Select your quiz type: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"graded\",\n            onChange: e => setQuizType(\"type\", e.target.value),\n            children: \"Graded Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ungraded\",\n            onChange: e => setQuizType(\"type\", e.target.value),\n            children: \"Ungraded Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Duration of quiz (in minutes):\", /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          placeholder: \"30\",\n          onChange: e => setQuizDuration(\"duration\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"allQns\",\n        children: allQns.map((a, i) => a)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-info\",\n        size: \"sm\",\n        onClick: addMCQQuestion,\n        children: \"Add MCQ Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-info\",\n        size: \"sm\",\n        onClick: addTFQuestion,\n        children: \"Add True/False Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: e => handleSubmit(e),\n        children: \"Preview Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TrainerCreateQuiz, \"oS/p/0crRXEe9jl7d8EZKjg+jVg=\");\n\n_c = TrainerCreateQuiz;\nexport default TrainerCreateQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainerCreateQuiz\");","map":{"version":3,"sources":["C:/Users/User/Documents/spm_g6t8/frontend/src/pages/Trainer/TrainerCreateQuiz.js"],"names":["TrainerMCQQuestion","TrainerTFQuestion","Form","Container","Button","useState","useEffect","axios","TrainerCreateQuiz","quizType","setQuizType","quizDuration","setQuizDuration","allQns","setAllQns","qnNum","setQnNum","addMCQQuestion","addTFQuestion","handleSubmit","e","preventDefault","document","getElementsByClassName","children","qnsInfo","i","length","qnInputs","qnTitle","value","qnOptions","qnType","className","optionValues","answer","j","optionValue","isOptionChecked","checked","push","console","log","qnID","title","options","qnanswer","k","post","then","alert","target","map","a"],"mappings":";;;AAAA,OAAO,sCAAP;AACA,OAAOA,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,SACIC,IADJ,EAEIC,SAFJ,EAGIC,MAHJ,QAIO,iBAJP;AAKA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAE5B;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,CAAD,CAAhD;AAEA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC,CAf4B,CAgB5B;AACA;;AAEA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMY,cAAc,GAAG,MAAM;AACzB;AACAH,IAAAA,SAAS,CAAED,MAAM,IAAI,CAAC,GAAGA,MAAJ,eAAY,QAAC,kBAAD;AAAgC,MAAA,KAAK,EAAEE;AAAvC,OAAyBA,KAAzB;AAAA;AAAA;AAAA;AAAA,YAAZ,CAAZ,CAAT;AACAC,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH,GAJD;;AAMA,QAAMG,aAAa,GAAG,MAAM;AACxB;AACAJ,IAAAA,SAAS,CAAED,MAAM,IAAI,CAAC,GAAGA,MAAJ,eAAY,QAAC,iBAAD;AAA+B,MAAA,KAAK,EAAEE;AAAtC,OAAwBA,KAAxB;AAAA;AAAA;AAAA;AAAA,YAAZ,CAAZ,CAAT;AACAC,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH,GAJD;;AAMA,QAAMI,YAAY,GAAGC,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACC,cAAF,GADsB,CAGtB;;AACA,QAAIR,MAAM,GAAGS,QAAQ,CAACC,sBAAT,CAAgC,QAAhC,EAA0C,CAA1C,EAA6CC,QAA1D;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAACc,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAIE,QAAQ,GAAGf,MAAM,CAACa,CAAD,CAAN,CAAUF,QAAzB;AACA,UAAIK,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE,KAA1B;AACA,UAAIC,SAAS,GAAGH,QAAQ,CAAC,CAAD,CAAR,CAAYJ,QAA5B;AACA,UAAIQ,MAAM,GAAGnB,MAAM,CAACa,CAAD,CAAN,CAAUO,SAAvB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACJ,MAA9B,EAAsCS,CAAC,EAAvC,EAA2C;AACvC,YAAIJ,MAAM,KAAK,KAAf,EAAsB;AAClB,cAAIK,WAAW,GAAGN,SAAS,CAACK,CAAD,CAAT,CAAab,sBAAb,CAAoC,cAApC,EAAoD,CAApD,EAAuDO,KAAzE;AACA,cAAIQ,eAAe,GAAGP,SAAS,CAACK,CAAD,CAAT,CAAab,sBAAb,CAAoC,kBAApC,EAAwD,CAAxD,EAA2DC,QAA3D,CAAoE,CAApE,EAAuEe,OAA7F;AACAL,UAAAA,YAAY,CAACM,IAAb,CAAkBH,WAAlB;AAEAI,UAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;;AACA,cAAII,eAAJ,EAAqB;AACjBH,YAAAA,MAAM,GAAGE,WAAT;AACH;AACJ,SATD,MASO,IAAIL,MAAM,KAAK,IAAf,EAAqB;AACxBE,UAAAA,YAAY,GAAG,CAAC,MAAD,EAAS,OAAT,CAAf,CADwB,CAExB;;AACAC,UAAAA,MAAM,GAAIJ,SAAS,CAACK,CAAD,CAAT,CAAaZ,QAAb,CAAsB,CAAtB,EAAyBe,OAA1B,GAAqC,MAArC,GAA8CJ,MAAvD;AACH;AAEJ;;AAEDV,MAAAA,OAAO,CAACe,IAAR,CAAa;AACT,mBAAWX,OADF;AAET,wBAAgBK,YAFP;AAGT,kBAAUC;AAHD,OAAb;AAOH;;AAEDM,IAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AAEA,QAAIkB,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACE,MAA5B,EAAoCoB,CAAC,EAArC,EAAyC;AACrCH,MAAAA,KAAK,GAAGnB,OAAO,CAACsB,CAAD,CAAP,CAAWlB,OAAnB;AACH;;AAEDtB,IAAAA,KAAK,CAACyC,IAAN,CAAW,4BAAX,EAAyC;AAErC;AACA,gBAAU,GAH2B;AAIrC,cAAQvC,QAJ6B;AAKrC,kBAAYE,YALyB,CAMrC;AACA;AACA;;AARqC,KAAzC,EAWKsC,IAXL,CAWUR,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAXV;AAYAQ,IAAAA,KAAK,CAAC,iDAAD,CAAL;AACH,GAjED;;AAmEA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA,2DAC2B;AAAA;AAAA;AAAA;AAAA,gBAD3B,eAEI;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAuB,YAAA,QAAQ,EAAE9B,CAAC,IAAIV,WAAW,CAAC,MAAD,EAASU,CAAC,CAAC+B,MAAF,CAASrB,KAAlB,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAyB,YAAA,QAAQ,EAAEV,CAAC,IAAIV,WAAW,CAAC,MAAD,EAASU,CAAC,CAAC+B,MAAF,CAASrB,KAAlB,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,IAAD,CAAM,KAAN;AAAA,kEAEI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,WAAW,EAAC,IAAxC;AAA6C,UAAA,QAAQ,EAAEV,CAAC,IAAIR,eAAe,CAAC,UAAD,EAAaQ,CAAC,CAAC+B,MAAF,CAASrB,KAAtB;AAA3E;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,eAeI;AAAA;AAAA;AAAA;AAAA,cAfJ,eA2BI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACKjB,MAAM,CAACuC,GAAP,CAAW,CAACC,CAAD,EAAI3B,CAAJ,KACR2B,CADH;AADL;AAAA;AAAA;AAAA;AAAA,cA3BJ,eAgCI;AAAA;AAAA;AAAA;AAAA,cAhCJ,eAiCI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,cAAhB;AAA+B,QAAA,IAAI,EAAC,IAApC;AAAyC,QAAA,OAAO,EAAEpC,cAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCJ,eAkCI;AAAA;AAAA;AAAA;AAAA,cAlCJ,eAmCI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,cAAhB;AAA+B,QAAA,IAAI,EAAC,IAApC;AAAyC,QAAA,OAAO,EAAEC,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ,eAoCI;AAAA;AAAA;AAAA;AAAA,cApCJ,eAqCI;AAAA;AAAA;AAAA;AAAA,cArCJ,eAsCI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEE,CAAC,IAAID,YAAY,CAACC,CAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+CH,CAnJD;;GAAMZ,iB;;KAAAA,iB;AAsJN,eAAeA,iBAAf","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport TrainerMCQQuestion from '../../components/TrainerMCQQuestion'\r\nimport TrainerTFQuestion from '../../components/TrainerTFQuestion'\r\nimport {\r\n    Form,\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\"\r\nimport { useState, useEffect } from 'react'\r\nimport axios from \"axios\"\r\n\r\n\r\nconst TrainerCreateQuiz = () => {\r\n\r\n    // const [courses, setCourses] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(\"http://127.0.0.1:5000/courses\").then((res) => {\r\n    //     setCourses(res.data);\r\n    //     });\r\n    // }, []);\r\n\r\n    // console.log(courses[0].courseID)\r\n\r\n    const [quizType, setQuizType] = useState(\"\")\r\n    const [quizDuration, setQuizDuration] = useState(0)\r\n    \r\n    const [allQns, setAllQns] = useState([])\r\n    // const [mcqQuestion, setMCQQuestion] = useState([])\r\n    // const [tfQuestion, setTFQuestion] = useState([])\r\n\r\n    const [qnNum, setQnNum] = useState(1)\r\n\r\n    const addMCQQuestion = () => {\r\n        // setMCQQuestion( mcqquestion => [...mcqquestion, <TrainerMCQQuestion />])\r\n        setAllQns( allQns => [...allQns, <TrainerMCQQuestion key={qnNum} qnNum={qnNum} />])\r\n        setQnNum(qnNum+1)\r\n    }\r\n\r\n    const addTFQuestion = () => {\r\n        // setTFQuestion( tfquestion => [...tfquestion, <TrainerTFQuestion />])\r\n        setAllQns( allQns => [...allQns, <TrainerTFQuestion key={qnNum} qnNum={qnNum} />])\r\n        setQnNum(qnNum+1)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        // getting all information from each question\r\n        let allQns = document.getElementsByClassName(\"allQns\")[0].children\r\n        let qnsInfo = []\r\n        for (let i = 0; i < allQns.length; i++) {\r\n            let qnInputs = allQns[i].children\r\n            let qnTitle = qnInputs[1].value\r\n            let qnOptions = qnInputs[2].children\r\n            let qnType = allQns[i].className\r\n\r\n            let optionValues = []\r\n            let answer = \"\"\r\n            for (let j = 0; j < qnOptions.length; j++) {\r\n                if (qnType === \"mcq\") {\r\n                    let optionValue = qnOptions[j].getElementsByClassName(\"form-control\")[0].value\r\n                    let isOptionChecked = qnOptions[j].getElementsByClassName(\"input-group-text\")[0].children[0].checked\r\n                    optionValues.push(optionValue)\r\n\r\n                    console.log(optionValues)\r\n                    if (isOptionChecked) {\r\n                        answer = optionValue\r\n                    }\r\n                } else if (qnType === \"tf\") {\r\n                    optionValues = [\"True\", \"False\"]\r\n                    // console.log(qnOptions[j].children[0].checked)\r\n                    answer = (qnOptions[j].children[0].checked) ? \"True\" : answer\r\n                }\r\n    \r\n            }\r\n\r\n            qnsInfo.push({\r\n                \"qnTitle\": qnTitle,\r\n                \"optionValues\": optionValues,\r\n                \"answer\": answer \r\n            })\r\n\r\n\r\n        }\r\n\r\n        console.log(qnsInfo)\r\n\r\n        let qnID = 1\r\n        let title = ''\r\n        let options = []\r\n        let qnanswer = ''\r\n\r\n        for (let k = 0; k < qnsInfo.length; k++) {\r\n            title = qnsInfo[k].qnTitle\r\n        }\r\n\r\n        axios.post(\"http://127.0.0.1:5000/quiz\", {\r\n\r\n            // to fill up\r\n            \"quizID\": \"1\",\r\n            \"type\": quizType,\r\n            \"duration\": quizDuration\r\n            // \"title\": title,\r\n            // \"options\": options,\r\n            // \"answer\": qnanswer\r\n\r\n        })\r\n            .then(console.log(\"sent to backend!\"))\r\n        alert(\"quiz created! redirecting back to manage course\")\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Chapter 1 Quiz</h1>\r\n            <Form>\r\n                <Form.Label>\r\n                    Select your quiz type: <br />\r\n                    <select className=\"form-select\">\r\n                        <option value=\"graded\" onChange={e => setQuizType(\"type\", e.target.value)}>Graded Quiz</option>\r\n                        <option value=\"ungraded\" onChange={e => setQuizType(\"type\", e.target.value)}>Ungraded Quiz</option>\r\n                    </select>\r\n                </Form.Label>\r\n                <br />\r\n                <Form.Label>\r\n                    Duration of quiz (in minutes):\r\n                    <Form.Control type=\"number\" placeholder=\"30\" onChange={e => setQuizDuration(\"duration\", e.target.value)} />\r\n                </Form.Label>\r\n                {/* <TrainerMCQQuestion /> */}\r\n                {/* <TrainerTFQuestion /> */}\r\n                <br />\r\n                \r\n                {/* <div>\r\n                    {mcqQuestion.map((a, i) => (\r\n                    <div key={i}>{a}</div>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    {tfQuestion.map((a, i) => (\r\n                    <div key={i}>{a}</div>\r\n                    ))}\r\n                </div> */}\r\n                <div className=\"allQns\">\r\n                    {allQns.map((a, i) => (\r\n                        a\r\n                    ))}\r\n                </div>\r\n                <br />\r\n                <Button variant=\"outline-info\" size=\"sm\" onClick={addMCQQuestion}>Add MCQ Question</Button>\r\n                <br />\r\n                <Button variant=\"outline-info\" size=\"sm\" onClick={addTFQuestion}>Add True/False Question</Button>\r\n                <br />\r\n                <br />\r\n                <Button type=\"submit\" onClick={e => handleSubmit(e)}>\r\n                    Preview Quiz\r\n                </Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default TrainerCreateQuiz"]},"metadata":{},"sourceType":"module"}